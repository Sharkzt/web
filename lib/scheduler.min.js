(function() {
    var e, t, n;
    (function(r) {
        function c(e, t) {
            var n, r, i, s, o, u, f, l, c, h, p = t && t.split("/"), d = a.map, v = d && d["*"] || {};
            if (e && e.charAt(0) === ".") {
                if (t) {
                    p = p.slice(0, p.length-1);
                    e = p.concat(e.split("/"));
                    for (l = 0; l < e.length; l += 1) {
                        h = e[l];
                        if (h === ".") {
                            e.splice(l, 1);
                            l -= 1
                        } else if (h === "..") {
                            if (l === 1 && (e[2] === ".." || e[0] === "..")) {
                                break
                            } else if (l > 0) {
                                e.splice(l-1, 2);
                                l -= 2
                            }
                        }
                    }
                    e = e.join("/")
                }
            }
            if ((p || v) && d) {
                n = e.split("/");
                for (l = n.length; l > 0; l -= 1) {
                    r = n.slice(0, l).join("/");
                    if (p) {
                        for (c = p.length; c > 0; c -= 1) {
                            i = d[p.slice(0, c).join("/")];
                            if (i) {
                                i = i[r];
                                if (i) {
                                    s = i;
                                    o = l;
                                    break
                                }
                            }
                        }
                    }
                    if (s) {
                        break
                    }
                    if (!u && v && v[r]) {
                        u = v[r];
                        f = l
                    }
                }
                if (!s && u) {
                    s = u;
                    o = f
                }
                if (s) {
                    n.splice(0, o, s);
                    e = n.join("/")
                }
            }
            return e
        }
        function h(e, t) {
            return function() {
                return s.apply(r, l.call(arguments, 0).concat([e, t]))
            }
        }
        function p(e) {
            return function(t) {
                return c(t, e)
            }
        }
        function d(e) {
            return function(t) {
                o[e] = t
            }
        }
        function v(e) {
            if (u.hasOwnProperty(e)) {
                var t = u[e];
                delete u[e];
                f[e] = true;
                i.apply(r, t)
            }
            if (!o.hasOwnProperty(e)) {
                throw new Error("No " + e)
            }
            return o[e]
        }
        function m(e, t) {
            var n, r, i = e.indexOf("!");
            if (i!==-1) {
                n = c(e.slice(0, i), t);
                e = e.slice(i + 1);
                r = v(n);
                if (r && r.normalize) {
                    e = r.normalize(e, p(t))
                } else {
                    e = c(e, t)
                }
            } else {
                e = c(e, t)
            }
            return {
                f: n ? n + "!" + e: e,
                n: e,
                p: r
            }
        }
        function g(e) {
            return function() {
                return a && a.config && a.config[e] || {}
            }
        }
        var i, s, o = {}, u = {}, a = {}, f = {}, l = [].slice;
        i = function(e, t, n, i) {
            var s, a, l, c, p, y = [], b;
            i = i || e;
            if (typeof n === "function") {
                t=!t.length && n.length ? ["require", "exports", "module"] : t;
                for (p = 0; p < t.length; p += 1) {
                    c = m(t[p], i);
                    a = c.f;
                    if (a === "require") {
                        y[p] = h(e)
                    } else if (a === "exports") {
                        y[p] = o[e] = {};
                        b = true
                    } else if (a === "module") {
                        s = y[p] = {
                            id: e,
                            uri: "",
                            exports: o[e],
                            config: g(e)
                        }
                    } else if (o.hasOwnProperty(a) || u.hasOwnProperty(a)) {
                        y[p] = v(a)
                    } else if (c.p) {
                        c.p.load(c.n, h(i, true), d(a), {});
                        y[p] = o[a]
                    } else if (!f[a]) {
                        throw new Error(e + " missing " + a)
                    }
                }
                l = n.apply(o[e], y);
                if (e) {
                    if (s && s.exports !== r && s.exports !== o[e]) {
                        o[e] = s.exports
                    } else if (l !== r ||!b) {
                        o[e] = l
                    }
                }
            } else if (e) {
                o[e] = n
            }
        };
        e = t = s = function(e, t, n, o, u) {
            if (typeof e === "string") {
                return v(m(e, t).f)
            } else if (!e.splice) {
                a = e;
                if (t.splice) {
                    e = t;
                    t = n;
                    n = null
                } else {
                    e = r
                }
            }
            t = t || function() {};
            if (typeof n === "function") {
                n = o;
                o = u
            }
            if (o) {
                i(r, e, t, n)
            } else {
                setTimeout(function() {
                    i(r, e, t, n)
                }, 15)
            }
            return s
        };
        s.config = function(e) {
            a = e;
            return s
        };
        n = function(e, t, n) {
            if (!t.splice) {
                n = t;
                t = []
            }
            u[e] = [e, t, n]
        };
        n.amd = {
            jQuery: true
        }
    })();
    n("almond", function() {});
    n("fuelux/util", ["require", "jquery"], function(e) {
        function n(e, n) {
            return (e.textContent || e.innerText || t(e).text() || "").toLowerCase() === (n || "").toLowerCase()
        }
        var t = e("jquery");
        t.expr[":"].fuelTextExactCI = t.expr.createPseudo ? t.expr.createPseudo(function(e) {
            return function(t) {
                return n(t, e)
            }
        }) : function(e, t, r) {
            return n(e, r[3])
        }
    });
    n("fuelux/combobox", ["require", "jquery", "./util"], function(e) {
        var t = e("jquery");
        var n = t.fn.combobox;
        e("./util");
        var r = function(e, n) {
            this.$element = t(e);
            this.options = t.extend({}, t.fn.combobox.defaults, n);
            this.$element.on("click", "a", t.proxy(this.itemclicked, this));
            this.$element.on("change", "input", t.proxy(this.inputchanged, this));
            this.$input = this.$element.find("input");
            this.$button = this.$element.find(".btn");
            this.setDefaultSelection()
        };
        r.prototype = {
            constructor: r,
            selectedItem: function() {
                var e = this.$selectedItem;
                var n = {};
                if (e) {
                    var r = this.$selectedItem.text();
                    n = t.extend({
                        text: r
                    }, this.$selectedItem.data())
                } else {
                    n = {
                        text: this.$input.val()
                    }
                }
                return n
            },
            selectByText: function(e) {
                var t = "li:fuelTextExactCI(" + e + ")";
                this.selectBySelector(t)
            },
            selectByValue: function(e) {
                var t = 'li[data-value="' + e + '"]';
                this.selectBySelector(t)
            },
            selectByIndex: function(e) {
                var t = "li:eq(" + e + ")";
                this.selectBySelector(t)
            },
            selectBySelector: function(e) {
                var t = this.$element.find(e);
                if (typeof t[0] !== "undefined") {
                    this.$selectedItem = t;
                    this.$input.val(this.$selectedItem.text())
                } else {
                    this.$selectedItem = null
                }
            },
            setDefaultSelection: function() {
                var e = "li[data-selected=true]:first";
                var t = this.$element.find(e);
                if (t.length > 0) {
                    this.selectBySelector(e);
                    t.removeData("selected");
                    t.removeAttr("data-selected")
                }
            },
            enable: function() {
                this.$input.removeAttr("disabled");
                this.$button.removeClass("disabled")
            },
            disable: function() {
                this.$input.attr("disabled", true);
                this.$button.addClass("disabled")
            },
            itemclicked: function(e) {
                this.$selectedItem = t(e.target).parent();
                this.$input.val(this.$selectedItem.text()).trigger("change", {
                    synthetic: true
                });
                var n = this.selectedItem();
                this.$element.trigger("changed", n);
                e.preventDefault()
            },
            inputchanged: function(e, n) {
                if (n && n.synthetic)
                    return;
                var r = t(e.target).val();
                this.selectByText(r);
                var i = this.selectedItem();
                if (i.text.length === 0) {
                    i = {
                        text: r
                    }
                }
                this.$element.trigger("changed", i)
            }
        };
        t.fn.combobox = function(e) {
            var n = Array.prototype.slice.call(arguments, 1);
            var i;
            var s = this.each(function() {
                var s = t(this);
                var o = s.data("combobox");
                var u = typeof e === "object" && e;
                if (!o)
                    s.data("combobox", o = new r(this, u));
                if (typeof e === "string")
                    i = o[e].apply(o, n)
            });
            return i === undefined ? s : i
        };
        t.fn.combobox.defaults = {};
        t.fn.combobox.Constructor = r;
        t.fn.combobox.noConflict = function() {
            t.fn.combobox = n;
            return this
        };
        t(function() {
            t(window).on("load", function() {
                t(".combobox").each(function() {
                    var e = t(this);
                    if (e.data("combobox"))
                        return;
                    e.combobox(e.data())
                })
            });
            t("body").on("mousedown.combobox.data-api", ".combobox", function() {
                var e = t(this);
                if (e.data("combobox"))
                    return;
                e.combobox(e.data())
            })
        })
    });
    n("fuelux/datepicker", ["require", "jquery"], function(e) {
        var t = e("jquery");
        var n = t.fn.datepicker;
        var r = false;
        e(["moment"], function(e) {
            r = e
        }, function(e) {
            var t = e.requireModules && e.requireModules[0];
            if (t === "moment") {
                if (typeof window.console !== "undefined") {
                    if (window.navigator.userAgent.search("PhantomJS") < 0) {
                        window.console.log("Don't worry if you're seeing a 404 that's looking for moment.js. The Fuel UX Datepicker is trying to use moment.js to give you extra features.");
                        window.console.log("Checkout the Fuel UX docs (http://exacttarget.github.io/fuelux/#datepicker) to see how to integrate moment.js for more features")
                    }
                }
            }
        });
        var i = function(e, n) {
            this.$element = t(e);
            this.options = t.extend(true, {}, t.fn.datepicker.defaults, n);
            this.formatDate = Boolean(this.options.createInput) && Boolean(this.options.createInput.native) ? this.formatNativeDate : this.options.formatDate || this.formatDate;
            this.parseDate = this.options.parseDate || this.parseDate;
            this.blackoutDates = this.options.blackoutDates || this.blackoutDates;
            if (this._checkForMomentJS()) {
                r = r || window.moment;
                this.moment = true;
                this.momentFormat = this.options.momentConfig.formatCode;
                this.setCulture(this.options.momentConfig.culture)
            }
            if (this.options.date !== null) {
                this.date = this.options.date || new Date;
                this.date = this.parseDate(this.date, false);
                this.viewDate = new Date(this.date.valueOf());
                this.stagedDate = new Date(this.date.valueOf())
            } else {
                this.date = null;
                this.viewDate = new Date;
                this.stagedDate = new Date
            }
            this.inputParsingTarget = null;
            this.viewDate.setHours(0, 0, 0, 0);
            this.stagedDate.setHours(0, 0, 0, 0);
            this.done = false;
            this.minDate = new Date;
            this.minDate.setDate(this.minDate.getDate()-1);
            this.minDate.setHours(0, 0, 0, 0);
            this.maxDate = new Date;
            this.maxDate.setFullYear(this.maxDate.getFullYear() + 10);
            this.maxDate.setHours(23, 59, 59, 999);
            this.years = this._yearRange(this.viewDate);
            this.bindingsAdded = false;
            this.options.dropdownWidth = this.options.dropdownWidth || 170;
            this.options.monthNames = this.options.monthNames || ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            this.options.weekdays = this.options.weekdays || ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
            this.options.showYears = false;
            this.options.showDays = true;
            this.options.showMonths = false;
            this.options.restrictLastMonth = Boolean(this.options.restrictDateSelection);
            this.options.restrictNextMonth = false;
            this.months = [{
                abbreviation: this.options.monthNames[0],
                "class": "",
                number: 0
            }, {
                abbreviation: this.options.monthNames[1],
                "class": "",
                number: 1
            }, {
                abbreviation: this.options.monthNames[2],
                "class": "",
                number: 2
            }, {
                abbreviation: this.options.monthNames[3],
                "class": "",
                number: 3
            }, {
                abbreviation: this.options.monthNames[4],
                "class": "",
                number: 4
            }, {
                abbreviation: this.options.monthNames[5],
                "class": "",
                number: 5
            }, {
                abbreviation: this.options.monthNames[6],
                "class": "",
                number: 6
            }, {
                abbreviation: this.options.monthNames[7],
                "class": "",
                number: 7
            }, {
                abbreviation: this.options.monthNames[8],
                "class": "",
                number: 8
            }, {
                abbreviation: this.options.monthNames[9],
                "class": "",
                number: 9
            }, {
                abbreviation: this.options.monthNames[10],
                "class": "",
                number: 10
            }, {
                abbreviation: this.options.monthNames[11],
                "class": "",
                number: 11
            }
            ];
            if (Boolean(this.options.createInput)) {
                if (typeof this.options.createInput === "boolean" && Boolean(this.options.createInput)) {
                    this.options.createInput = {}
                }
                if (typeof this.options.createInput === "object" && isNaN(this.options.createInput.length)) {
                    this.options.createInput.inputSize = this.options.createInput.inputSize || "span3";
                    this._renderInput()
                } else {
                    throw new Error("createInput option needs to be an object or boolean true")
                }
            } else {
                this._render()
            }
        };
        i.prototype = {
            constructor: i,
            disable: function() {
                this.$element.find("input, button").attr("disabled", true)
            },
            enable: function() {
                this.$element.find("input, button").attr("disabled", false)
            },
            getFormattedDate: function() {
                return this.formatDate(this.date)
            },
            getDate: function(e) {
                if (Boolean(e) && Boolean(e.unix)) {
                    return this.date.getTime()
                } else {
                    return this.date
                }
            },
            setDate: function(e) {
                this.date = this.parseDate(e, false);
                this.stagedDate = this.date;
                this.viewDate = this.date;
                this._render();
                this.$element.trigger("changed", this.date);
                return this.date
            },
            getCulture: function() {
                if (Boolean(this.moment)) {
                    return r.lang()
                } else {
                    throw "moment.js is not available so you cannot use this function"
                }
            },
            setCulture: function(e) {
                if (!Boolean(e)) {
                    return false
                }
                if (Boolean(this.moment)) {
                    r.lang(e)
                } else {
                    throw "moment.js is not available so you cannot use this function"
                }
            },
            getFormatCode: function() {
                if (Boolean(this.moment)) {
                    return this.momentFormat
                } else {
                    throw "moment.js is not available so you cannot use this function"
                }
            },
            setFormatCode: function(e) {
                if (!Boolean(e)) {
                    return false
                }
                if (Boolean(this.moment)) {
                    this.momentFormat = e
                } else {
                    throw "moment.js is not available so you cannot use this function"
                }
            },
            formatDate: function(e) {
                // if (Boolean(this.moment)) {
                //     return r(e).format(this.momentFormat)
                // } else {
                    return this.padTwo(e.getMonth() + 1) + "-" + this.padTwo(e.getDate()) + "-" + e.getFullYear()
                // }
            },
            formatNativeDate: function(e) {
                return e.getFullYear() + "-" + this.padTwo(e.getMonth() + 1) + "-" + this.padTwo(e.getDate())
            },
            parseDate: function(e, t) {

                // if (this.moment) {
                //     t = t || false;
                //     if (t) {
                //         if (r(e).toDate().toString() === "Invalid Date") {
                //             return false
                //         } else {
                //             return true
                //         }
                //     } else {
                //         return r(e).toDate()
                //     }
                // } else {
                    var n, i, s, o;
                    if (Boolean(e) && (new Date(e)).toString() !== "Invalid Date") {
                        if (typeof e === "string") {
                            e = e.split("T")[0];
                            i = /^\s*(\d{4})-(\d\d)-(\d\d)\s*$/;
                            n = new Date(NaN);
                            o = i.exec(e);
                            if (o) {
                                s =+ o[2];
                                n.setFullYear(o[1], s-1, o[3]);
                                if (s !== n.getMonth() + 1) {
                                    n.setTime(NaN)
                                }
                            }
                            return n
                        }
                        return new Date(e)
                    } else {
                        throw new Error("could not parse date")
                    }
                // }
            },
            blackoutDates: function(e) {
                e = e;
                return false
            },
            padTwo: function(e) {
                var t = "0" + e;
                return t.substr(t.length-2)
            },
            _setNullDate: function(e) {
                this.date = null;
                this.viewDate = new Date;
                this.stagedDate = new Date;
                this._insertDateIntoInput(e || "");
                this._renderWithoutInputManipulation()
            },
            _restrictDateSelectionSetup: function() {
                var e, t;
                if (Boolean(this.options)) {
                    if (!this.options.restrictDateSelection) {
                        e = false;
                        t = false
                    } else {
                        t = this.viewDate.getMonth() < (new Date).getMonth() ? true : false;
                        e = this.viewDate.getMonth() > (new Date).getMonth() ? false : true
                    }
                }
                this.options.restrictLastMonth = e;
                this.options.restrictNextMonth = t
            },
            _processDateRestriction: function(e, t) {
                var n = "";
                var r = false;
                t = t || false;
                if (e <= this.minDate || e >= this.maxDate) {
                    if (Boolean(this.blackoutDates(e))) {
                        n += " restrict blackout";
                        r = true
                    } else if (Boolean(this.options) && Boolean(this.options.restrictDateSelection)) {
                        n += " restrict";
                        r = true
                    } else {
                        n += " past"
                    }
                } else if (Boolean(this.blackoutDates(e))) {
                    n += " restrict blackout";
                    r = true
                }
                if (Boolean(t)) {
                    return n
                } else {
                    return r
                }
            },
            _repeat: function(e, t, n, r) {
                var i = e;
                for (var s = 0, o = t.length; s < o; s++) {
                    i += n(t[s])
                }
                i += r;
                return i
            },
            _getDaysInMonth: function(e, t) {
                return 32 - (new Date(t, e, 32)).getDate()
            },
            _range: function(e, t) {
                var n = [];
                for (var r = e; r < t; r++) {
                    n[n.length] = r
                }
                return n
            },
            _yearRange: function(e) {
                var t = Math.floor(e.getFullYear() / 10) * 10-1;
                var n = t + 12;
                var r = this._range(t, n);
                var i = [];
                for (var s = 0, o = r.length; s < o; s++) {
                    var u = "";
                    if (s === 0) {
                        u = "previous"
                    }
                    if (s === r.length-1) {
                        u = "next"
                    }
                    i[s] = {
                        number: r[s],
                        "class": u
                    }
                }
                return i
            },
            _killEvent: function(e) {
                e.stopPropagation();
                e.preventDefault();
                return false
            },
            _applySize: function(e, n) {
                for (var r = 0; r < e.length; r++) {
                    t(e[r]).css({
                        width: n,
                        height: n,
                        "line-height": n
                    })
                }
            },
            _show: function(e) {
                return e ? "" : "display: none;"
            },
            _hide: function(e) {
                return this._show(!e)
            },
            _showView: function(e) {
                if (e === 1) {
                    this.options.showDays = true;
                    this.options.showMonths = false;
                    this.options.showYears = false
                } else if (e === 2) {
                    this.options.showDays = false;
                    this.options.showMonths = true;
                    this.options.showYears = false
                } else if (e === 3) {
                    this.options.showDays = false;
                    this.options.showMonths = false;
                    this.options.showYears = true
                }
            },
            _updateCalendarData: function() {
                var e = this.viewDate.getMonth();
                var t = this.viewDate.getFullYear();
                var n = this.stagedDate.getDate();
                var r = this.stagedDate.getMonth();
                var i = this.stagedDate.getFullYear();
                var s = (new Date(t, e, 1)).getDay();
                var o = this._getDaysInMonth(e, t);
                var u = this._getDaysInMonth(e-1, t);
                if (s === 0) {
                    s = 7
                }
                var a = 42 - o - s;
                this.daysOfLastMonth = this._range(u - s + 1, u + 1);
                this.daysOfNextMonth = this._range(1, a + 1);
                for (var f = 0, l = this.daysOfLastMonth.length; f < l; f++) {
                    var c = {};
                    c.number = this.daysOfLastMonth[f];
                    c["class"] = "";
                    c["class"] = this._processDateRestriction(new Date(t, e + 1, this.daysOfLastMonth[f], 0, 0, 0, 0), true);
                    c["class"] += " past";
                    this.daysOfLastMonth[f] = c
                }
                for (var h = 0, p = this.daysOfNextMonth.length; h < p; h++) {
                    var d = {};
                    d.number = this.daysOfNextMonth[h];
                    d["class"] = "";
                    d["class"] = this._processDateRestriction(new Date(t, e + 1, this.daysOfNextMonth[h], 0, 0, 0, 0), true);
                    this.daysOfNextMonth[h] = d
                }
                var v = new Date;
                var m = v.getDate();
                var g = v.getMonth();
                var y = v.getFullYear();
                var b = e === g;
                var w = t === y;
                var E = e === r;
                var S = t === i;
                var x = this._range(1, o + 1);
                this.daysOfThisMonth = [];
                for (var T = 0, N = x.length; T < N; T++) {
                    var C = (new Date(t, e, x[T])).getDay();
                    var k = "weekday";
                    if (C === 6 || C === 0) {
                        k = "weekend"
                    }
                    if (C === 1) {
                        k = ""
                    }
                    k += " weekday" + C;
                    if (x[T] === n && E && S) {
                        k += " selected"
                    } else if (x[T] === m && b && w) {
                        k += " today"
                    }
                    var L = new Date(t, e, x[T], 0, 0, 0, 0);
                    k += this._processDateRestriction(L, true);
                    this.daysOfThisMonth[this.daysOfThisMonth.length] = {
                        number: x[T],
                        "class": k
                    }
                }
                var A = this._getDaysInMonth(this.minDate.getFullYear(), this.minDate.getMonth());
                for (var O = 0, M = this.months.length; O < M; O++) {
                    this.months[O]["class"] = "";
                    if (w && O === g) {
                        this.months[O]["class"] += " today"
                    }
                    if (O === r && S) {
                        this.months[O]["class"] += " selected"
                    }
                    var _ = new Date(t, O, A, 23, 59, 59, 999);
                    var D = new Date(t, O, 0, 0, 0, 0, 0);
                    if (_ <= this.minDate || D >= this.maxDate) {
                        if (Boolean(this.options.restrictDateSelection)) {
                            this.months[O]["class"] += " restrict"
                        }
                    }
                }
                this.years = this._yearRange(this.viewDate);
                A = this._getDaysInMonth(this.minDate.getFullYear(), 11);
                for (var P = 0, H = this.years.length; P < H; P++) {
                    if (this.years[P].number === y) {
                        this.years[P]["class"] += " today"
                    }
                    if (this.years[P].number === i) {
                        this.years[P]["class"] += " selected"
                    }
                    var B = new Date(this.years[P].number, 11, A, 23, 59, 59, 999);
                    var j = new Date(this.years[P].number, 0, 0, 0, 0, 0, 0);
                    if (B <= this.minDate || j >= this.maxDate) {
                        if (Boolean(this.options.restrictDateSelection)) {
                            this.years[P]["class"] += " restrict"
                        }
                    }
                }
            },
            _updateCss: function() {
                while (this.options.dropdownWidth%7 !== 0) {
                    this.options.dropdownWidth++
                }
                this.$view.css("width", this.options.dropdownWidth + "px");
                this.$header.css("width", this.options.dropdownWidth + "px");
                this.$labelDiv.css("width", this.options.dropdownWidth-60 + "px");
                this.$footer.css("width", this.options.dropdownWidth + "px");
                var e = this.options.dropdownWidth * .25-2;
                var t = Math.round((this.options.dropdownWidth - e * 3) / 2);
                var n = t;
                while (n + t + e * 3 < this.options.dropdownWidth) {
                    n += .1
                }
                while (n + t + e * 3 > this.options.dropdownWidth) {
                    n -= .1
                }
                t = parseInt(t / 2, 10);
                n = parseInt(n / 2, 10);
                this.$calendar.css({
                    "float": "left"
                });
                this.$monthsView.css({
                    width: this.options.dropdownWidth + "px",
                    "padding-top": t + "px",
                    "padding-bottom": n + "px"
                });
                this.$yearsView.css({
                    width: this.options.dropdownWidth + "px",
                    "padding-top": t + "px",
                    "padding-bottom": n + "px"
                });
                var r = Math.round(this.options.dropdownWidth / 7)-2 + "px";
                var i = Math.round(this.options.dropdownWidth / 7) + "px";
                this._applySize(this.$yearsView.children(), e + "px");
                this._applySize(this.$monthsView.children(), e + "px");
                this._applySize(this.$weekdaysDiv.children(), i);
                this._applySize(this.$lastMonthDiv.children(), r);
                this._applySize(this.$thisMonthDiv.children(), r);
                this._applySize(this.$nextMonthDiv.children(), r)
            },
            _close: function() {
                this.$input.dropdown("toggle")
            },
            _select: function(e) {
                this.inputParsingTarget = null;
                if (e.target.className.indexOf("restrict")>-1) {
                    return this._killEvent(e)
                } else {
                    this._killEvent(e);
                    this._close()
                }
                this.stagedDate = this.viewDate;
                this.stagedDate.setDate(parseInt(e.target.innerHTML, 10));
                this.setDate(this.stagedDate);
                this.done = true
            },
            _pickYear: function(e) {
                var n = parseInt(t(e.target).data("yearNumber"), 10);
                if (e.target.className.indexOf("restrict")>-1) {
                    return this._killEvent(e)
                }
                this.viewDate = new Date(n, this.viewDate.getMonth(), 1);
                this._showView(2);
                this._render();
                return this._killEvent(e)
            },
            _pickMonth: function(e) {
                var n = parseInt(t(e.target).data("monthNumber"), 10);
                if (e.target.className.indexOf("restrict")>-1) {
                    return this._killEvent(e)
                }
                this.viewDate = new Date(this.viewDate.getFullYear(), n, 1);
                this._showView(1);
                this._render();
                return this._killEvent(e)
            },
            _previousSet: function(e) {
                this._previous(e, true)
            },
            _previous: function(e, t) {
                if (e.target.className.indexOf("restrict")>-1) {
                    return this._killEvent(e)
                }
                if (this.options.showDays) {
                    this.viewDate = new Date(this.viewDate.getFullYear(), this.viewDate.getMonth()-1, 1)
                } else if (this.options.showMonths) {
                    this.viewDate = new Date(this.viewDate.getFullYear()-1, this.viewDate.getMonth(), 1)
                } else if (this.options.showYears) {
                    this.viewDate = new Date(this.viewDate.getFullYear()-10, this.viewDate.getMonth(), 1)
                }
                if (Boolean(t)) {
                    this._select(e)
                } else {
                    this._render()
                }
                return this._killEvent(e)
            },
            _nextSet: function(e) {
                this._next(e, true)
            },
            _next: function(e, t) {
                if (e.target.className.indexOf("restrict")>-1) {
                    return this._killEvent(e)
                }
                if (this.options.showDays) {
                    this.viewDate = new Date(this.viewDate.getFullYear(), this.viewDate.getMonth() + 1, 1)
                } else if (this.options.showMonths) {
                    this.viewDate = new Date(this.viewDate.getFullYear() + 1, this.viewDate.getMonth(), 1)
                } else if (this.options.showYears) {
                    this.viewDate = new Date(this.viewDate.getFullYear() + 10, this.viewDate.getMonth(), 1)
                }
                if (Boolean(t)) {
                    this._select(e)
                } else {
                    this._render()
                }
                return this._killEvent(e)
            },
            _today: function(e) {
                this.viewDate = new Date;
                this._showView(1);
                this._render();
                return this._killEvent(e)
            },
            _emptySpace: function(e) {
                if (Boolean(this.done)) {
                    this.done = false
                }
                return this._killEvent(e)
            },
            _monthLabel: function() {
                return this.options.monthNames[this.viewDate.getMonth()]
            },
            _yearLabel: function() {
                return this.viewDate.getFullYear()
            },
            _monthYearLabel: function() {
                var e;
                if (this.options.showDays) {
                    e = this._monthLabel() + " " + this._yearLabel()
                } else if (this.options.showMonths) {
                    e = this._yearLabel()
                } else if (this.options.showYears) {
                    e = this.years[0].number + " - " + this.years[this.years.length-1].number
                }
                return e
            },
            _toggleMonthYearPicker: function(e) {
                if (this.options.showDays) {
                    this._showView(2)
                } else if (this.options.showMonths) {
                    this._showView(3)
                } else if (this.options.showYears) {
                    this._showView(1)
                }
                this._render();
                return this._killEvent(e)
            },
            _renderCalendar: function() {
                var e = this;
                e._restrictDateSelectionSetup();
                return '<div class="calendar">' + '<div class="header clearfix">' + '<div class="left hover"><div class="leftArrow"></div></div>' + '<div class="right hover"><div class="rightArrow"></div></div>' + '<div class="center hover">' + e._monthYearLabel() + "</div>" + "</div>" + '<div class="daysView" style="' + e._show(e.options.showDays) + '">' + e._repeat('<div class="weekdays">', e.options.weekdays, function(e) {
                    return "<div >" + e + "</div>"
                }, "</div>") + e._repeat('<div class="lastmonth">', e.daysOfLastMonth, function(t) {
                    if (e.options.restrictLastMonth) {
                        t["class"] = t["class"].replace("restrict", "") + " restrict"
                    }
                    return '<div class="' + t["class"] + '">' + t.number + "</div>"
                }, "</div>") + e._repeat('<div class="thismonth">', e.daysOfThisMonth, function(e) {
                    return '<div class="' + e["class"] + '">' + e.number + "</div>"
                }, "</div>") + e._repeat('<div class="nextmonth">', e.daysOfNextMonth, function(t) {
                    if (e.options.restrictNextMonth) {
                        t["class"] = t["class"].replace("restrict", "") + " restrict"
                    }
                    return '<div class="' + t["class"] + '">' + t.number + "</div>"
                }, "</div>") + "</div>" + e._repeat('<div class="monthsView" style="' + e._show(e.options.showMonths) + '">', e.months, function(e) {
                    return '<div data-month-number="' + e.number + '" class="' + e["class"] + '">' + e.abbreviation + "</div>"
                }, "</div>") + e._repeat('<div class="yearsView" style="' + e._show(e.options.showYears) + '">', e.years, function(e) {
                    return '<div data-year-number="' + e.number + '" class="' + e["class"] + '">' + e.number + "</div>"
                }, "</div>") + '<div class="footer">' + '<div class="center hover">Today</div>' + "</div>" + "</div>"
            },
            _render: function() {
                this._insertDateIntoInput();
                this._updateCalendarData();
                if (Boolean(this.bindingsAdded))
                    this._removeBindings();
                this.$element.find(".dropdown-menu").html(this._renderCalendar());
                this._initializeCalendarElements();
                this._addBindings();
                this._updateCss()
            },
            _renderWithoutInputManipulation: function() {
                this._updateCalendarData();
                if (Boolean(this.bindingsAdded))
                    this._removeBindings();
                this.$element.find(".dropdown-menu").html(this._renderCalendar());
                this._initializeCalendarElements();
                this._addBindings();
                this._updateCss()
            },
            _renderInput: function() {
                var e = Boolean(this.options.createInput.native) ? this._renderInputNative(): this._renderInputHTML();
                this.$element.html(e);
                this._render()
            },
            _renderInputNative: function() {
                return '<input type="date" value="' + this.formatDate(this.date) + '"' + this._calculateInputSize(["native"]) + ">"
            },
            _renderInputHTML: function() {
                var e = Boolean(this.options.createInput.dropDownBtn) ? "input-append": "input-group";
                var t = '<div class="' + e + '">' + '<div class="dropdown-menu"></div>' + '<input type="text" ' + this._calculateInputSize() + ' value="' + this.formatDate(this.date) + '" data-toggle="dropdown">';
                if (Boolean(this.options.createInput.dropDownBtn)) {
                    t = t + '<button type="button" class="btn" data-toggle="dropdown"><i class="icon-calendar"></i></button>'
                }
                t = t + "</div>";
                return '<div class="datepicker dropdown">' + t + "</div>"
            },
            _calculateInputSize: function(e) {
                if (Boolean(parseInt(this.options.createInput.inputSize, 10))) {
                    return 'style="width:' + this.options.createInput.inputSize + 'px"'
                } else {
                    e = Boolean(e) ? " " + e.join(" ") : "";
                    return 'class="' + this.options.createInput.inputSize + e + '"'
                }
            },
            _insertDateIntoInput: function(e) {
                var t;
                if (Boolean(e)) {
                    t = this.formatDate(this.stagedDate)
                } else if (this.date !== null) {
                    t = this.formatDate(this.date)
                } else {
                    t = ""
                }
                this.$element.find('input[type="text"]').val(t)
            },
            _inputDateParsing: function() {
                var e = this.$input.val();
                var t = true;
                var n = 10;
                var r = n-2;
                if (e.length >= r && e.length <= n) {
                    if (Boolean(this.parseDate(e, true))) {
                        if (!this._processDateRestriction(this.parseDate(e))) {
                            t = false;
                            this.setDate(e)
                        }
                    }
                } else {
                    t = false
                }
                if (!!t) {
                    this._setNullDate(true);
                    this.$element.trigger("inputParsingFailed")
                }
            },
            _checkForMomentJS: function() {
                if (t.isFunction(window.moment) || typeof r !== "undefined" && t.isFunction(r)) {
                    if (t.isPlainObject(this.options.momentConfig)) {
                        if (Boolean(this.options.momentConfig.culture) && Boolean(this.options.momentConfig.formatCode)) {
                            return true
                        } else {
                            return false
                        }
                    } else {
                        return false
                    }
                } else {
                    return false
                }
            },
            _initializeCalendarElements: function() {
                this.$input = this.$element.find('input[type="text"]');
                this.$calendar = this.$element.find("div.calendar");
                this.$header = this.$calendar.children().eq(0);
                this.$labelDiv = this.$header.children().eq(2);
                this.$view = this.$calendar.children().eq(1);
                this.$monthsView = this.$calendar.children().eq(2);
                this.$yearsView = this.$calendar.children().eq(3);
                this.$weekdaysDiv = this.$view.children().eq(0);
                this.$lastMonthDiv = this.$view.children().eq(1);
                this.$thisMonthDiv = this.$view.children().eq(2);
                this.$nextMonthDiv = this.$view.children().eq(3);
                this.$footer = this.$calendar.children().eq(4)
            },
            _addBindings: function() {
                var e = this;
                if (Boolean(this.moment)) {
                    this.$calendar.on("mouseover", function() {
                        e.inputParsingTarget = "calendar"
                    });
                    this.$calendar.on("mouseout", function() {
                        e.inputParsingTarget = null
                    });
                    this.$input.on("blur", function() {
                        if (e.inputParsingTarget === null) {
                            e._inputDateParsing()
                        }
                    })
                }
                this.$calendar.on("click", t.proxy(this._emptySpace, this));
                this.$header.find(".left").on("click", t.proxy(this._previous, this));
                this.$header.find(".right").on("click", t.proxy(this._next, this));
                this.$header.find(".center").on("click", t.proxy(this._toggleMonthYearPicker, this));
                this.$lastMonthDiv.find("div").on("click", t.proxy(this._previousSet, this));
                this.$thisMonthDiv.find("div").on("click", t.proxy(this._select, this));
                this.$nextMonthDiv.find("div").on("click", t.proxy(this._nextSet, this));
                this.$monthsView.find("div").on("click", t.proxy(this._pickMonth, this));
                this.$yearsView.find("div").on("click", t.proxy(this._pickYear, this));
                this.$footer.find(".center").on("click", t.proxy(this._today, this));
                this.bindingsAdded = true
            },
            _removeBindings: function() {
                if (Boolean(this.moment)) {
                    this.$calendar.off("mouseover");
                    this.$calendar.off("mouseout");
                    this.$input.off("blur")
                }
                this.$calendar.off("click");
                this.$header.find(".left").off("click");
                this.$header.find(".right").off("click");
                this.$header.find(".center").off("click");
                this.$lastMonthDiv.find("div").off("click");
                this.$thisMonthDiv.find("div").off("click");
                this.$nextMonthDiv.find("div").off("click");
                this.$monthsView.find("div").off("click");
                this.$yearsView.find("div").off("click");
                this.$footer.find(".center").off("click");
                this.bindingsAdded = false
            }
        };
        t.fn.datepicker = function(e) {
            var n = Array.prototype.slice.call(arguments, 1);
            var r;
            var s = this.each(function() {
                var s = t(this);
                var o = s.data("datepicker");
                var u = typeof e === "object" && e;
                if (!o)
                    s.data("datepicker", o = new i(this, u));
                if (typeof e === "string")
                    r = o[e].apply(o, n)
            });
            return r === undefined ? s : r
        };
        t.fn.datepicker.defaults = {
            date: new Date,
            momentConfig: {
                culture: "en",
                formatCode: "LL"
            },
            createInput: false,
            dropdownWidth: 170,
            restrictDateSelection: true
        };
        t.fn.datepicker.Constructor = i;
        t.fn.datepicker.noConflict = function() {
            t.fn.datepicker = n;
            return this
        }
    });
    n("fuelux/spinner", ["require", "jquery"], function(e) {
        var t = e("jquery");
        var n = t.fn.spinner;
        var r = function(e, n) {
            this.$element = t(e);
            this.options = t.extend({}, t.fn.spinner.defaults, n);
            this.$input = this.$element.find(".spinner-input");
            this.$element.on("keyup", this.$input, t.proxy(this.change, this));
            if (this.options.hold) {
                this.$element.on("mousedown", ".spinner-up", t.proxy(function() {
                    this.startSpin(true)
                }, this));
                this.$element.on("mouseup", ".spinner-up, .spinner-down", t.proxy(this.stopSpin, this));
                this.$element.on("mouseout", ".spinner-up, .spinner-down", t.proxy(this.stopSpin, this));
                this.$element.on("mousedown", ".spinner-down", t.proxy(function() {
                    this.startSpin(false)
                }, this))
            } else {
                this.$element.on("click", ".spinner-up", t.proxy(function() {
                    this.step(true)
                }, this));
                this.$element.on("click", ".spinner-down", t.proxy(function() {
                    this.step(false)
                }, this))
            }
            this.switches = {
                count: 1,
                enabled: true
            };
            if (this.options.speed === "medium") {
                this.switches.speed = 300
            } else if (this.options.speed === "fast") {
                this.switches.speed = 100
            } else {
                this.switches.speed = 500
            }
            this.lastValue = null;
            this.render();
            if (this.options.disabled) {
                this.disable()
            }
        };
        r.prototype = {
            constructor: r,
            render: function() {
                var e = this.$input.val();
                if (e) {
                    this.value(e)
                } else {
                    this.$input.val(this.options.value)
                }
                this.$input.attr("maxlength", (this.options.max + "").split("").length)
            },
            change: function() {
                var e = this.$input.val();
                if (e / 1) {
                    this.options.value = e / 1
                } else {
                    e = e.replace(/[^0-9]/g, "") || "";
                    this.$input.val(e);
                    this.options.value = e / 1
                }
                this.triggerChangedEvent()
            },
            stopSpin: function() {
                if (this.switches.timeout !== undefined) {
                    clearTimeout(this.switches.timeout);
                    this.switches.count = 1;
                    this.triggerChangedEvent()
                }
            },
            triggerChangedEvent: function() {
                var e = this.value();
                if (e === this.lastValue)
                    return;
                this.lastValue = e;
                this.$element.trigger("changed", e);
                this.$element.trigger("change")
            },
            startSpin: function(e) {
                if (!this.options.disabled) {
                    var n = this.switches.count;
                    if (n === 1) {
                        this.step(e);
                        n = 1
                    } else if (n < 3) {
                        n = 1.5
                    } else if (n < 8) {
                        n = 2.5
                    } else {
                        n = 4
                    }
                    this.switches.timeout = setTimeout(t.proxy(function() {
                        this.iterator(e)
                    }, this), this.switches.speed / n);
                    this.switches.count++
                }
            },
            iterator: function(e) {
                this.step(e);
                this.startSpin(e)
            },
            step: function(e) {
                var t = this.options.value;
                var n = e ? this.options.max: this.options.min;
                var r, i;
                if (e ? t < n : t > n) {
                    var s = t + (e ? 1 : -1) * this.options.step;
                    if (this.options.step%1 !== 0) {
                        r = (this.options.step + "").split(".")[1].length;
                        i = Math.pow(10, r);
                        s = Math.round(s * i) / i
                    }
                    if (e ? s > n : s < n) {
                        this.value(n)
                    } else {
                        this.value(s)
                    }
                } else if (this.options.cycle) {
                    var o = e ? this.options.min: this.options.max;
                    this.value(o)
                }
            },
            value: function(e) {
                if (!isNaN(parseFloat(e)) && isFinite(e)) {
                    e = parseFloat(e);
                    this.options.value = e;
                    this.$input.val(e);
                    return this
                } else {
                    return this.options.value
                }
            },
            disable: function() {
                this.options.disabled = true;
                this.$input.attr("disabled", "");
                this.$element.find("button").addClass("disabled")
            },
            enable: function() {
                this.options.disabled = false;
                this.$input.removeAttr("disabled");
                this.$element.find("button").removeClass("disabled")
            }
        };
        t.fn.spinner = function(e) {
            var n = Array.prototype.slice.call(arguments, 1);
            var i;
            var s = this.each(function() {
                var s = t(this);
                var o = s.data("spinner");
                var u = typeof e === "object" && e;
                if (!o)
                    s.data("spinner", o = new r(this, u));
                if (typeof e === "string")
                    i = o[e].apply(o, n)
            });
            return i === undefined ? s : i
        };
        t.fn.spinner.defaults = {
            value: 1,
            min: 1,
            max: 999,
            step: 1,
            hold: true,
            speed: "medium",
            disabled: false
        };
        t.fn.spinner.Constructor = r;
        t.fn.spinner.noConflict = function() {
            t.fn.spinner = n;
            return this
        };
        t(function() {
            t("body").on("mousedown.spinner.data-api", ".spinner", function() {
                var e = t(this);
                if (e.data("spinner"))
                    return;
                e.spinner(e.data())
            })
        })
    });
    n("fuelux/radio", ["require", "jquery"], function(e) {
        var t = e("jquery");
        var n = t.fn.radio;
        var r = function(e, n) {
            this.$element = t(e);
            this.options = t.extend({}, t.fn.radio.defaults, n);
            this.$label = this.$element.parent();
            this.$icon = this.$label.find("i");
            this.$radio = this.$label.find("input[type=radio]");
            this.groupName = this.$radio.attr("name");
            this.setState(this.$radio);
            this.$radio.on("change", t.proxy(this.itemchecked, this))
        };
        r.prototype = {
            constructor: r,
            setState: function(e) {
                e = e || this.$radio;
                var t = e.is(":checked");
                var n=!!e.prop("disabled");
                this.$icon.removeClass("checked disabled");
                this.$label.removeClass("checked");
                if (t === true) {
                    this.$icon.addClass("checked");
                    this.$label.addClass("checked")
                }
                if (n === true) {
                    this.$icon.addClass("disabled")
                }
            },
            resetGroup: function() {
                var e = t('input[name="' + this.groupName + '"]');
                e.next().removeClass("checked");
                e.parent().removeClass("checked")
            },
            enable: function() {
                this.$radio.attr("disabled", false);
                this.$icon.removeClass("disabled")
            },
            disable: function() {
                this.$radio.attr("disabled", true);
                this.$icon.addClass("disabled")
            },
            itemchecked: function(e) {
                var n = t(e.target);
                this.resetGroup();
                this.setState(n)
            },
            check: function() {
                this.resetGroup();
                this.$radio.prop("checked", true);
                this.setState(this.$radio)
            },
            uncheck: function() {
                this.$radio.prop("checked", false);
                this.setState(this.$radio)
            },
            isChecked: function() {
                return this.$radio.is(":checked")
            }
        };
        t.fn.radio = function(e) {
            var n = Array.prototype.slice.call(arguments, 1);
            var i;
            var s = this.each(function() {
                var s = t(this);
                var o = s.data("radio");
                var u = typeof e === "object" && e;
                if (!o)
                    s.data("radio", o = new r(this, u));
                if (typeof e === "string")
                    i = o[e].apply(o, n)
            });
            return i === undefined ? s : i
        };
        t.fn.radio.defaults = {};
        t.fn.radio.Constructor = r;
        t.fn.radio.noConflict = function() {
            t.fn.radio = n;
            return this
        };
        t(function() {
            t(window).on("load", function() {
                t(".radio-custom > input[type=radio]").each(function() {
                    var e = t(this);
                    if (e.data("radio"))
                        return;
                    e.radio(e.data())
                })
            })
        })
    });
    n("fuelux/select", ["require", "jquery", "./util"], function(e) {
        var t = e("jquery");
        var n = t.fn.select;
        e("./util");
        var r = function(e, n) {
            this.$element = t(e);
            this.options = t.extend({}, t.fn.select.defaults, n);
            this.$element.on("click", "a", t.proxy(this.itemclicked, this));
            this.$button = this.$element.find(".btn");
            this.$hiddenField = this.$element.find(".hidden-field");
            this.$label = this.$element.find(".dropdown-label");
            this.setDefaultSelection();
            if (n.resize === "auto") {
                this.resize()
            }
        };
        r.prototype = {
            constructor: r,
            itemclicked: function(e) {
                this.$selectedItem = t(e.target).parent();
                this.$hiddenField.val(this.$selectedItem.attr("data-value"));
                this.$label.text(this.$selectedItem.text());
                var n = this.selectedItem();
                this.$element.trigger("changed", n);
                e.preventDefault()
            },
            resize: function() {
                var e = 0;
                var n = t("<div/>").addClass("select-sizer");
                var r = 0;
                if (Boolean(t(document).find("html").hasClass("fuelux"))) {
                    t(document.body).append(n)
                } else {
                    t(".fuelux:first").append(n)
                }
                this.$element.find("a").each(function() {
                    n.text(t(this).text());
                    e = n.outerWidth();
                    if (e > r) {
                        r = e
                    }
                });
                n.remove();
                this.$label.width(r)
            },
            selectedItem: function() {
                var e = this.$selectedItem.text();
                return t.extend({
                    text: e
                }, this.$selectedItem.data())
            },
            selectByText: function(e) {
                var t = "li a:fuelTextExactCI(" + e + ")";
                this.selectBySelector(t)
            },
            selectByValue: function(e) {
                var t = 'li[data-value="' + e + '"]';
                this.selectBySelector(t)
            },
            selectByIndex: function(e) {
                var t = "li:eq(" + e + ")";
                this.selectBySelector(t)
            },
            selectBySelector: function(e) {
                var t = this.$element.find(e);
                this.$selectedItem = t;
                this.$hiddenField.val(this.$selectedItem.attr("data-value"));
                this.$label.text(this.$selectedItem.text())
            },
            setDefaultSelection: function() {
                var e = "li[data-selected=true]:first";
                var t = this.$element.find(e);
                if (t.length === 0) {
                    this.selectByIndex(0)
                } else {
                    this.selectBySelector(e);
                    t.removeData("selected");
                    t.removeAttr("data-selected")
                }
            },
            enable: function() {
                this.$button.removeClass("disabled")
            },
            disable: function() {
                this.$button.addClass("disabled")
            }
        };
        t.fn.select = function(e) {
            var n = Array.prototype.slice.call(arguments, 1);
            var i;
            var s = this.each(function() {
                var s = t(this);
                var o = s.data("select");
                var u = typeof e === "object" && e;
                if (!o)
                    s.data("select", o = new r(this, u));
                if (typeof e === "string")
                    i = o[e].apply(o, n)
            });
            return i === undefined ? s : i
        };
        t.fn.select.defaults = {};
        t.fn.select.Constructor = r;
        t.fn.select.noConflict = function() {
            t.fn.select = n;
            return this
        };
        t(function() {
            t(window).on("load", function() {
                t(".select").each(function() {
                    var e = t(this);
                    if (e.data("select"))
                        return;
                    e.select(e.data())
                })
            });
            t("body").on("mousedown.select.data-api", ".select", function() {
                var e = t(this);
                if (e.data("select"))
                    return;
                e.select(e.data())
            })
        })
    });
    n("fuelux/scheduler", ["require", "jquery", "fuelux/combobox", "fuelux/datepicker", "fuelux/radio", "fuelux/select", "fuelux/spinner"], function(e) {
        var t = e("jquery");
        var n = t.fn.scheduler;
        e("fuelux/combobox");
        e("fuelux/datepicker");
        e("fuelux/radio");
        e("fuelux/select");
        e("fuelux/spinner");
        var r = function(e, n) {
            var r = this;
            this.$element = t(e);
            this.options = t.extend({}, t.fn.scheduler.defaults, n);
            this.$startDate = this.$element.find(".scheduler-start .datepicker");
            this.$startTime = this.$element.find(".scheduler-start .combobox");
            this.$timeZone = this.$element.find(".scheduler-timezone .select");
            this.$repeatIntervalPanel = this.$element.find(".repeat-interval-panel");
            this.$repeatIntervalSelect = this.$element.find(".repeat-interval .select");
            this.$repeatIntervalSpinner = this.$element.find(".repeat-interval-panel .spinner");
            this.$repeatIntervalTxt = this.$element.find(".repeat-interval-text");
            this.$end = this.$element.find(".scheduler-end");
            this.$endAfter = this.$end.find(".spinner");
            this.$endSelect = this.$end.find(".select");
            this.$endDate = this.$end.find(".datepicker");
            this.$recurrencePanels = this.$element.find(".recurrence-panel");
            this.$element.find(".scheduler-weekly .btn-group .btn").on("click", function(e, t) {
                r.changed(e, t, true)
            });
            this.$element.find(".combobox").on("changed", t.proxy(this.changed, this));
            this.$element.find(".datepicker").on("changed", t.proxy(this.changed, this));
            this.$element.find(".select").on("changed", t.proxy(this.changed, this));
            this.$element.find(".spinner").on("changed", t.proxy(this.changed, this));
            this.$element.find(".scheduler-monthly label.radio, .scheduler-yearly label.radio").on("mouseup", t.proxy(this.changed, this));
            this.$repeatIntervalSelect.on("changed", t.proxy(this.repeatIntervalSelectChanged, this));
            this.$endSelect.on("changed", t.proxy(this.endSelectChanged, this));
            this.$startDate.datepicker();
            this.$startTime.combobox();
            if (this.$startTime.find("input").val() === "") {
                this.$startTime.combobox("selectByIndex", 0)
            }
            this.$repeatIntervalSpinner.spinner();
            this.$endAfter.spinner();
            this.$endDate.datepicker()
        };
        r.prototype = {
            constructor: r,
            changed: function(e, n, r) {
                if (!r) {
                    e.stopPropagation()
                }
                this.$element.trigger("changed", {
                    data: n !== undefined ? n: t(e.currentTarget).data(),
                    originalEvent: e,
                    value: this.getValue()
                })
            },
            disable: function() {
                this.toggleState("disable")
            },
            enable: function() {
                this.toggleState("enable")
            },
            endSelectChanged: function(e, t) {
                var n, r;
                if (!t) {
                    n = this.$endSelect.select("selectedItem");
                    r = n.value
                } else {
                    r = t.value
                }
                this.$endAfter.hide();
                this.$endDate.hide();
                if (r === "after") {
                    this.$endAfter.show()
                } else if (r === "date") {
                    this.$endDate.show()
                }
            },
            getValue: function() {
                var e = this.$repeatIntervalSpinner.spinner("value");
                var n = "";
                var r = this.$repeatIntervalSelect.select("selectedItem").value;
                var i = this.$startTime.combobox("selectedItem").text.toLowerCase();
                var s = this.$timeZone.select("selectedItem");
                var o = function(e, t) {
                    var n = "";
                    var r;
                    n += e.getFullYear();
                    n += t;
                    r = e.getMonth() + 1;
                    n += r < 10 ? "0" + r : r;
                    n += t;
                    r = e.getDate();
                    n += r < 10 ? "0" + r : r;
                    return n
                };
                var u, a, f, l, c, h, p, d;
                p = "" + o(this.$startDate.datepicker("getDate"), "-");
                p += "T";
                f = i.search("am") >= 0;
                l = i.search("pm") >= 0;
                i = t.trim(i.replace(/am/g, "").replace(/pm/g, "")).split(":");
                i[0] = parseInt(i[0], 10);
                i[1] = parseInt(i[1], 10);
                if (f && i[0] > 11) {
                    i[0] = 0
                } else if (l && i[0] < 12) {
                    i[0] += 12
                }
                p += i[0] < 10 ? "0" + i[0] : i[0];
                p += ":";
                p += i[1] < 10 ? "0" + i[1] : i[1];
                p += s.offset === "+00:00" ? "Z" : s.offset;
                if (r === "none") {
                    n = "FREQ=DAILY;INTERVAL=1;COUNT=1;"
                } else if (r === "hourly") {
                    n = "FREQ=HOURLY;";
                    n += "INTERVAL=" + e + ";"
                } else if (r === "daily") {
                    n += "FREQ=DAILY;";
                    n += "INTERVAL=" + e + ";"
                } else if (r === "weekdays") {
                    n += "FREQ=DAILY;";
                    n += "BYDAY=MO,TU,WE,TH,FR;";
                    n += "INTERVAL=1;"
                } else if (r === "weekly") {
                    a = [];
                    this.$element.find(".scheduler-weekly .btn-group button.active").each(function() {
                        a.push(t(this).data().value)
                    });
                    n += "FREQ=WEEKLY;";
                    n += "BYDAY=" + a.join(",") + ";";
                    n += "INTERVAL=" + e + ";"
                } else if (r === "monthly") {
                    n += "FREQ=MONTHLY;";
                    n += "INTERVAL=" + e + ";";
                    d = parseInt(this.$element.find("input[name=scheduler-month]:checked").val(), 10);
                    if (d === 1) {
                        u = parseInt(this.$element.find(".scheduler-monthly-date .select").select("selectedItem").text, 10);
                        n += "BYMONTHDAY=" + u + ";"
                    } else if (d === 2) {
                        a = this.$element.find(".month-days").select("selectedItem").value;
                        h = this.$element.find(".month-day-pos").select("selectedItem").value;
                        n += "BYDAY=" + a + ";";
                        n += "BYSETPOS=" + h + ";"
                    }
                } else if (r === "yearly") {
                    n += "FREQ=YEARLY;";
                    d = parseInt(this.$element.find("input[name=scheduler-year]:checked").val(), 10);
                    if (d === 1) {
                        c = this.$element.find(".scheduler-yearly-date .year-month").select("selectedItem").value;
                        u = this.$element.find(".year-month-day").select("selectedItem").text;
                        n += "BYMONTH=" + c + ";";
                        n += "BYMONTHDAY=" + u + ";"
                    } else if (d === 2) {
                        a = this.$element.find(".year-month-days").select("selectedItem").value;
                        h = this.$element.find(".year-month-day-pos").select("selectedItem").value;
                        c = this.$element.find(".scheduler-yearly-day .year-month").select("selectedItem").value;
                        n += "BYDAY=" + a + ";";
                        n += "BYSETPOS=" + h + ";";
                        n += "BYMONTH=" + c + ";"
                    }
                }
                var v = this.$endSelect.select("selectedItem").value;
                var m = "";
                if (r !== "none") {
                    if (v === "after") {
                        m = "COUNT=" + this.$endAfter.spinner("value") + ";"
                    } else if (v === "date") {
                        m = "UNTIL=" + o(this.$endDate.datepicker("getDate"), "") + ";"
                    }
                }
                n += m;
                var g = {
                    startDateTime: p,
                    timeZone: {
                        name: s.name,
                        offset: s.offset
                    },
                    recurrencePattern: n
                };
                return g
            },
            repeatIntervalSelectChanged: function(e, t) {
                var n, r, i;
                if (!t) {
                    n = this.$repeatIntervalSelect.select("selectedItem");
                    r = n.value;
                    i = n.text
                } else {
                    r = t.value;
                    i = t.text
                }
                this.$repeatIntervalTxt.text(i);
                switch (r.toLowerCase()) {
                    case"hourly":
                    case"daily":
                    case"weekly":
                    case"monthly":
                        this.$repeatIntervalPanel.show();
                        break;
                    default:
                        this.$repeatIntervalPanel.hide();
                        break
                }
                this.$recurrencePanels.hide();
                this.$element.find(".scheduler-" + r).show();
                if (r === "none") {
                    this.$end.hide()
                } else {
                    this.$end.show()
                }
            },
            setValue: function(e) {
                var n, r, i, s, o, u, a, f;
                if (e.startDateTime) {
                    f = e.startDateTime.split("T");
                    this.$startDate.datepicker("setDate", f[0]);
                    if (f[1]) {
                        f[1] = f[1].split(":");
                        n = parseInt(f[1][0], 10);
                        o = f[1][1] ? parseInt(f[1][1].split("+")[0].split("-")[0].split("Z")[0], 10) : 0;
                        u = n < 12 ? "AM" : "PM";
                        if (n === 0) {
                            n = 12
                        } else if (n > 12) {
                            n -= 12
                        }
                        o = o < 10 ? "0" + o : o;
                        f = n + ":" + o + " " + u;
                        this.$startTime.find("input").val(f);
                        this.$startTime.combobox("selectByText", f)
                    }
                }
                i = "li[data";
                if (e.timeZone) {
                    if (typeof e.timeZone === "string") {
                        i += '-name="' + e.timeZone
                    } else {
                        if (e.timeZone.name) {
                            i += '-name="' + e.timeZone.name
                        } else {
                            i += '-offset="' + e.timeZone.offset
                        }
                    }
                    i += '"]';
                    this.$timeZone.select("selectBySelector", i)
                } else if (e.startDateTime) {
                    f = e.startDateTime.split("T")[1];
                    if (f) {
                        if (f.search(/\+/)>-1) {
                            f = "+" + t.trim(f.split("+")[1])
                        } else if (f.search(/\-/)>-1) {
                            f = "-" + t.trim(f.split("-")[1])
                        } else {
                            f = "+00:00"
                        }
                    } else {
                        f = "+00:00"
                    }
                    i += '-offset="' + f + '"]';
                    this.$timeZone.select("selectBySelector", i)
                }
                if (e.recurrencePattern) {
                    a = {};
                    f = e.recurrencePattern.toUpperCase().split(";");
                    for (r = 0, s = f.length; r < s; r++) {
                        if (f[r] !== "") {
                            i = f[r].split("=");
                            a[i[0]] = i[1]
                        }
                    }
                    if (a.FREQ === "DAILY") {
                        if (a.BYDAY === "MO,TU,WE,TH,FR") {
                            i = "weekdays"
                        } else {
                            if (a.INTERVAL === "1" && a.COUNT === "1") {
                                i = "none"
                            } else {
                                i = "daily"
                            }
                        }
                    } else if (a.FREQ === "HOURLY") {
                        i = "hourly"
                    } else if (a.FREQ === "WEEKLY") {
                        if (a.BYDAY) {
                            i = this.$element.find(".scheduler-weekly .btn-group");
                            i.find("button").removeClass("active");
                            f = a.BYDAY.split(",");
                            for (r = 0, s = f.length; r < s; r++) {
                                i.find('button[data-value="' + f[r] + '"]').addClass("active")
                            }
                        }
                        i = "weekly"
                    } else if (a.FREQ === "MONTHLY") {
                        this.$element.find(".scheduler-monthly input").removeClass("checked");
                        if (a.BYMONTHDAY) {
                            f = this.$element.find(".scheduler-monthly-date");
                            f.find("input").addClass("checked");
                            f.find(".select").select("selectByValue", a.BYMONTHDAY)
                        } else if (a.BYDAY) {
                            f = this.$element.find(".scheduler-monthly-day");
                            f.find("input").addClass("checked");
                            if (a.BYSETPOS) {
                                f.find(".month-day-pos").select("selectByValue", a.BYSETPOS)
                            }
                            f.find(".month-days").select("selectByValue", a.BYDAY)
                        }
                        i = "monthly"
                    } else if (a.FREQ === "YEARLY") {
                        this.$element.find(".scheduler-yearly input").removeClass("checked");
                        if (a.BYMONTHDAY) {
                            f = this.$element.find(".scheduler-yearly-date");
                            f.find("input").addClass("checked");
                            if (a.BYMONTH) {
                                f.find(".year-month").select("selectByValue", a.BYMONTH)
                            }
                            f.find(".year-month-day").select("selectByValue", a.BYMONTHDAY)
                        } else if (a.BYSETPOS) {
                            f = this.$element.find(".scheduler-yearly-day");
                            f.find("input").addClass("checked");
                            f.find(".year-month-day-pos").select("selectByValue", a.BYSETPOS);
                            if (a.BYDAY) {
                                f.find(".year-month-days").select("selectByValue", a.BYDAY)
                            }
                            if (a.BYMONTH) {
                                f.find(".year-month").select("selectByValue", a.BYMONTH)
                            }
                        }
                        i = "yearly"
                    } else {
                        i = "none"
                    }
                    if (a.COUNT) {
                        this.$endAfter.spinner("value", parseInt(a.COUNT, 10));
                        this.$endSelect.select("selectByValue", "after")
                    } else if (a.UNTIL) {
                        f = a.UNTIL;
                        if (f.length === 8) {
                            f = f.split("");
                            f.splice(4, 0, "-");
                            f.splice(7, 0, "-");
                            f = f.join("")
                        }
                        this.$endDate.datepicker("setDate", f);
                        this.$endSelect.select("selectByValue", "date")
                    }
                    this.endSelectChanged();
                    if (a.INTERVAL) {
                        this.$repeatIntervalSpinner.spinner("value", parseInt(a.INTERVAL, 10))
                    }
                    this.$repeatIntervalSelect.select("selectByValue", i);
                    this.repeatIntervalSelectChanged()
                }
            },
            toggleState: function(e) {
                this.$element.find(".combobox").combobox(e);
                this.$element.find(".datepicker").datepicker(e);
                this.$element.find(".select").select(e);
                this.$element.find(".spinner").spinner(e);
                this.$element.find(".radio").radio(e);
                if (e === "disable") {
                    e = "addClass"
                } else {
                    e = "removeClass"
                }
                this.$element.find(".scheduler-weekly .btn-group")[e]("disabled")
            },
            value: function(e) {
                if (e) {
                    return this.setValue(e)
                } else {
                    return this.getValue()
                }
            }
        };
        t.fn.scheduler = function(e) {
            var n = Array.prototype.slice.call(arguments, 1);
            var i;
            var s = this.each(function() {
                var s = t(this);
                var o = s.data("scheduler");
                var u = typeof e === "object" && e;
                if (!o)
                    s.data("scheduler", o = new r(this, u));
                if (typeof e === "string")
                    i = o[e].apply(o, n)
            });
            return i === undefined ? s : i
        };
        t.fn.scheduler.defaults = {};
        t.fn.scheduler.Constructor = r;
        t.fn.scheduler.noConflict = function() {
            t.fn.scheduler = n;
            return this
        };
        t(function() {
            t("body").on("mousedown.scheduler.data-api", ".scheduler", function() {
                var e = t(this);
                if (e.data("scheduler"))
                    return;
                e.scheduler(e.data())
            })
        })
    });
    n("fuelux/all", ["require", "jquery", "fuelux/combobox", "fuelux/datepicker", "fuelux/radio", "fuelux/scheduler", "fuelux/spinner", "fuelux/select"], function(e) {
        e("jquery");
        e("fuelux/combobox");
        e("fuelux/datepicker");
        e("fuelux/radio");
        e("fuelux/scheduler");
        e("fuelux/spinner");
        e("fuelux/select")
    });
    n("jquery", [], function() {
        return jQuery
    });
    n("moment", [], function() {});
    n("fuelux/loader", ["fuelux/all"], function() {});
    t("fuelux/loader")
})();